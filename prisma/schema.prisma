// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model UserRole {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model User {
  id                  Int                  @id @default(autoincrement())
  clerk_id            String               @unique
  name                String
  email               String               @unique
  phone               String              @default("Neuvedené")
  role_id             Int                  @default(2)
  role                UserRole             @relation(fields: [role_id], references: [id])
  OrganizationMember  OrganizationMember[]
  TaskUpdate          TaskUpdate[]
  meetings            MeetingAttendant[]
  meetingItems        MeetingItem[]
  meetingItemComments MeetingItemComment[]
}

// Organizations

model Organization {
  id        Int                  @id @default(autoincrement())
  parent_id Int?
  name      String               @unique
  type      OrganizationType
  parent    Organization?        @relation("OrganizationParent", fields: [parent_id], references: [id])
  children  Organization[]       @relation("OrganizationParent")
  members   OrganizationMember[]
  Task      Task[]
}

enum OrganizationType {
  main
  custom
}

model OrganizationMember {
  id                Int                  @id @default(autoincrement())
  user_id           Int
  manager_id        Int?
  organization_id   Int
  position_name     String
  user              User                 @relation(fields: [user_id], references: [id])
  manager           OrganizationMember?  @relation("MemberManager", fields: [manager_id], references: [id])
  subordinates      OrganizationMember[] @relation("MemberManager")
  organization      Organization         @relation(fields: [organization_id], references: [id])
  TaskComment       TaskComment[]
  AssignedTasks     Task[]               @relation("AssignedMember")
  CreatedTasks      Task[]               @relation("TaskCreator")
  TaskSubscriptions TaskSubscription[]
  TaskReminders     TaskReminder[]
}

// Tasks

model Task {
  id                Int                 @id @default(autoincrement())
  name              String
  status            TaskStatus          @default(TODO)
  priority          TaskPriority
  description       String
  // type_id           Int
  // type              TaskType            @relation(fields: [type_id], references: [id])
  parent_id         Int?
  parent            Task?               @relation("ParentTask", fields: [parent_id], references: [id])
  organization_id   Int?
  organization      Organization?       @relation(fields: [organization_id], references: [id])
  creator_id        Int
  creator           OrganizationMember? @relation("TaskCreator", fields: [creator_id], references: [id])
  assignee_id       Int?
  assignee          OrganizationMember? @relation("AssignedMember", fields: [assignee_id], references: [id])
  source            String              @default("Organizačná úloha")
  createdAt         DateTime            @default(now())
  updateAt          DateTime            @default(now())
  deadline          DateTime
  completition_date DateTime?
  TaskUpdate        TaskUpdate[]
  TaskComment       TaskComment[]
  SubTasks          Task[]              @relation("ParentTask")
  Subscriptions     TaskSubscription[]
  Reminders         TaskReminder[]
  Meta              TaskMeta[]

  @@fulltext([name])
}

model TaskMeta {
  id      Int    @id @default(autoincrement())
  task_id Int
  task    Task   @relation(fields: [task_id], references: [id])
  key     String
  value   String
}

model TaskSubscription {
  id        Int                @id @default(autoincrement())
  task_id   Int
  task      Task               @relation(fields: [task_id], references: [id])
  member_id Int
  member    OrganizationMember @relation(fields: [member_id], references: [id])
}

model TaskUpdate {
  id          Int      @id @default(autoincrement())
  task_id     Int
  task        Task     @relation(fields: [task_id], references: [id])
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  key         String
  title       String
  description String?
  createdAt   DateTime @default(now())
  value       String?
}

model TaskComment {
  id         Int                @id @default(autoincrement())
  task_id    Int
  task       Task               @relation(fields: [task_id], references: [id])
  creator_id Int
  creator    OrganizationMember @relation(fields: [creator_id], references: [id])
  message    String             @db.VarChar(250)
  createdAt  DateTime           @default(now())
  updateAt   DateTime           @default(now())
}

model TaskReminder {
  id          Int                 @id @default(autoincrement())
  task_id     Int
  task        Task                @relation(fields: [task_id], references: [id])
  member_id   Int?
  member      OrganizationMember? @relation(fields: [member_id], references: [id])
  description String
  datetime    DateTime
}

model TaskType {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  // Task        Task[]
}

enum TaskStatus {
  TODO
  WAITING
  INPROGRESS
  CHECKREQ
  DONE
}

enum TaskPriority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

// Meetings

model Meeting {
  id         Int                @id @default(autoincrement())
  attendants MeetingAttendant[]
  name       String
  date       DateTime
  meta       MeetingMeta[]
  items      MeetingItem[]
}

model MeetingAttendant {
  id         Int                  @id @default(autoincrement())
  meeting_id Int
  meeting    Meeting              @relation(fields: [meeting_id], references: [id])
  user_id    Int
  user       User                @relation(fields: [user_id], references: [id])
  role       MeetingAttendantRole @default(ATTENDANT)
}

enum MeetingAttendantRole {
  CREATOR
  ATTENDANT
}

model MeetingMeta {
  id         Int     @id @default(autoincrement())
  meeting_id Int
  meeting    Meeting @relation(fields: [meeting_id], references: [id])
  key        String
  value      String
}

model MeetingItem {
  id          Int                  @id @default(autoincrement())
  status      MeetingItemStatus    @default(DRAFT)
  description String
  meeting_id  Int
  meeting     Meeting              @relation(fields: [meeting_id], references: [id])
  creator_id  Int
  creator     User?                @relation(fields: [creator_id], references: [id])
  comments    MeetingItemComment[]
}

enum MeetingItemStatus {
  DRAFT
  PENDING
  DENIED
  ACCEPTED
}

model MeetingItemComment {
  id         Int         @id @default(autoincrement())
  item_id    Int
  item       MeetingItem @relation(fields: [item_id], references: [id])
  creator_id Int
  creator    User        @relation(fields: [creator_id], references: [id])
  message    String @db.Text
  createdAt  DateTime    @default(now())
}
